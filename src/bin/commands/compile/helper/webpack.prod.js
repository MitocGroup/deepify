'use strict';

const ENTRY_POINT = 'bootstrap.js';
const PLUGINS_PLACEHOLDER = '~~~DEEP_WEBPACK_PLUGINS~~~';

const path = require('path');
const fse = require('fs-extra');
const fs = require('fs');
const webpackMerge = require('webpack-merge');
const Bin = require('../../../../lib.compiled/NodeJS/Bin').Bin;
const Core = require('deep-core');
const pify = require('pify');

// @todo Resolve webpack dynamically (maybe link it?)
const WEBPACK_LIB = path.join(
  Bin.resolve('webpack'),
  '../../lib/node_modules/webpack/lib/webpack.js'
);

function plainify (config, debug) {
  config.plugins = [ PLUGINS_PLACEHOLDER ];
  
  const plainConfig = `/* Generated by Deepify on ${Date()} */
const webpack = require('${WEBPACK_LIB}');
module.exports = ${JSON.stringify(config, null, '  ')};
`;
  const plugins = `
new webpack.DefinePlugin({
  'process.env.NODE_ENV': '"production"',
}),
new webpack.optimize.OccurrenceOrderPlugin(),
`;

  return plainConfig.replace(`"${PLUGINS_PLACEHOLDER}"`, plugins);
}

module.exports = function (lambdaPath, outputPath, debug) {
  const schemasPath = path.join(lambdaPath, Core.AWS.Lambda.Runtime.VALIDATION_SCHEMAS_DIR);
  const customWebpackConfigPath = path.join(lambdaPath, 'deep.webpack.json');
  const tmpBootstrapJs = path.join(lambdaPath, `deep-tmp-${Date.now()}-${ENTRY_POINT}`);
  let preparePromise = Promise.resolve();
  
  if (fs.existsSync(schemasPath)) {
    preparePromise = pify(fse.copy)(
        path.join(lambdaPath, ENTRY_POINT),
        tmpBootstrapJs
      )
      .then(() => pify(fs.readdir)(schemasPath))
      .then(files => {
        const schemaImports = files
          .filter(file => /\.js(on)?$/i)
          .map(file => {
            return `require('./${Core.AWS.Lambda.Runtime.VALIDATION_SCHEMAS_DIR}/${file}');`;
          })
          .join('\n');
          
        return pify(fs.appendFile)(tmpBootstrapJs, schemaImports);
      });
  }
  
  return preparePromise.then(() => {
    const defaultConfig = {
      entry: tmpBootstrapJs,
      output: {
        path: outputPath,
        filename: ENTRY_POINT,
        libraryTarget: 'commonjs2', // @see https://github.com/webpack/webpack/issues/1114
      },
      resolve: {
        modules: [ lambdaPath, 'node_modules' ],
        extensions: [ '.js', '.json' ],
        alias: {},
      },
      target: 'node',
      externals: [ 'aws-sdk' ],
      devtool: false,
      stats: 'errors-only',
    };
    
    try {
      const rawConfig = plainify(webpackMerge.smart(
        defaultConfig, 
        fse.readJsonSync(
          customWebpackConfigPath, 
          { throws: false }
        ) || {}
      ), debug);
      
      return Promise.resolve({ rawConfig, tmpBootstrapJs });
    } catch (error) {
      console.debug(`Missing or broken custom Webpack config ${customWebpackConfigPath}. Using default one...`);
    }
    
    const rawConfig = plainify(defaultConfig, debug);
    
    return Promise.resolve({ rawConfig, tmpBootstrapJs });
  });
};
